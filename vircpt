#!/usr/bin/python3
"""
    Copyright (C) 2023  Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import sys
import logging
import argparse
import glob
from getpass import getuser
from subprocess import CalledProcessError
import shutil
import rich
from libvirt import libvirtError
from libvircpt import client as virt
from libvircpt import checkpoint
from libvircpt import common as lib
from libvircpt.logcount import logCount
from libvircpt import fs
from libvircpt import command
from libvircpt.exceptions import (
    domainNotFound,
    connectionFailed,
)

__version__ = "0.1"


def checkRequirements() -> bool:
    """Check if required utils are installed"""
    for exe in ("nbdinfo", "nbdcopy", "qemu-img"):
        if not shutil.which(exe):
            logging.error("Please install required [%s] utility.", exe)
            return False
    return True


def execute(cmd):
    """execute command and print stdout"""
    try:
        proc = command.run(cmd)
    except CalledProcessError as e:
        logging.error("Error during command execution: [%s]", e.stderr)
        return
    except FileNotFoundError as e:
        logging.error("%s", e)
        return

    if "-q" in cmd:
        return

    if "--json" not in cmd:
        if proc.stdout == "":
            return
        print(proc.stdout.strip())
        return

    rich.print_json(proc.stdout)


def refreshDiskList(args, virtClient, domObj):
    """Refresh list about disks included in checkpoint"""
    cpt = checkpoint.exists(domObj, args.name)
    return virtClient.getDomainDisksFromCheckpoint(cpt.getXMLDesc())


def getDisks(args, vmConfig, virtClient, domObj):
    """Parse disks as configured in virtual machine config"""
    diskList = virtClient.getDomainDisks(args, vmConfig)
    for disk in diskList:
        try:
            disk.size = domObj.blockInfo(disk.target)[0]
        except libvirtError as e:
            logging.warning("Unable to get disk size: [%s]", e)
    return diskList


def showcmd(args, domObj, diskList):
    """Show useful commands"""
    logging.info("Socket for exported checkpoint: [%s]", args.socketfile)
    logging.info("-----------------------------------")
    logging.info("Useful commands:")
    logging.info("-----------------------------------")
    logging.info("[nbdinfo 'nbd+unix:///?socket=%s' --list]", args.socketfile)
    cnt = 0
    for disk in diskList:
        disk.size = domObj.blockInfo(disk.target)[0]
        logging.info("Disk: %s", disk.target)
        logging.info(
            " [qemu-img create -F raw "
            "-b nbd+unix:///%s?socket=%s -f qcow2 /tmp/image_%s.qcow2]",
            disk.target,
            args.socketfile,
            disk.target,
        )
        logging.info(
            " [qemu-nbd -c /dev/nbd%s /tmp/image_%s.qcow2] "
            " && [virsh attach-disk tgtvm --source /dev/nbd%s --target vdX]",
            cnt,
            disk.target,
            cnt,
        )
        logging.info(
            " [qemu-nbd -c /dev/nbd%s 'nbd+unix:///%s?socket=%s' -r]"
            " && [fdisk -l /dev/nbd%s]",
            cnt,
            disk.target,
            args.socketfile,
            cnt,
        )
        logging.info(
            " [nbdcopy 'nbd+unix:///%s?socket=%s' -p backup-%s.img]",
            disk.target,
            args.socketfile,
            disk.target,
        )
        logging.info(
            " [qemu-img create -f qcow2 backup-%s.qcow2 %sB && "
            "nbdcopy -p 'nbd+unix:///%s?socket=%s' -- [ qemu-nbd -f qcow2 backup-%s.qcow2 ]]",
            disk.target,
            disk.size,
            disk.target,
            args.socketfile,
            disk.target,
        )
        cnt += 1
    logging.info("-----------------------------------")


def main() -> None:
    """main"""
    parser = argparse.ArgumentParser(
        description="Libvirt checkpoint swiss army knife",
        epilog=(
            "Examples:\n"
            "   # create an checkpoint:\n"
            "\t%(prog)s -d vm create --name mycpt\n"
            "   # delete an checkpoint:\n"
            "\t%(prog)s -d vm delete --name mycpt\n"
            "   # list existing checkpoints:\n"
            "\t%(prog)s -d vm list\n"
            "   # export checkpoint via NBD accessible via unix socket:\n"
            "\t%(prog)s -d vm export --name mycpt\n"
            "   # show export info:\n"
            "\t%(prog)s -d vm nbdinfo\n"
            "   # show bitmap mapping:\n"
            "\t%(prog)s -d vm nbdmap\n"
            "   # create full backup using nbdcopy:\n"
            "\t%(prog)s -d vm nbdcopy\n"
            "   # create overlay images:\n"
            "\t%(prog)s -d vm overlay\n"
            "   # release export:\n"
            "\t%(prog)s -d vm release\n"
        ),
        formatter_class=argparse.RawTextHelpFormatter,
    )

    opt = parser.add_argument_group("General options")
    opt.add_argument(
        "-d", "--domain", required=True, type=str, help="Domain to operate on"
    )
    opt.add_argument(
        "-v",
        "--verbose",
        default=False,
        action="store_true",
        help="Debug log",
    )

    user = getuser() or None

    session = "qemu:///system"
    if user != "root":
        session = "qemu:///session"
    opt.add_argument(
        "-U",
        "--uri",
        default=session,
        required=False,
        type=str,
        help="Libvirt connection URI. (default: %(default)s)",
    )
    opt.add_argument(
        "--user",
        default=None,
        required=False,
        type=str,
        help="User to authenticate against libvirtd. (default: %(default)s)",
    )
    opt.add_argument(
        "--password",
        default=None,
        required=False,
        type=str,
        help="Password to authenticate against libvirtd. (default: %(default)s)",
    )
    opt.add_argument(
        "-x",
        "--exclude",
        default=None,
        type=str,
        help="Exclude disk(s) with target dev name (-x vda,vdb)",
    )
    opt.add_argument(
        "-i",
        "--include",
        default=None,
        type=str,
        help="Include only disk with target dev name (-i vda)",
    )
    opt.add_argument(
        "-S",
        "--scratchdir",
        default="/var/tmp",
        required=False,
        type=str,
        help="Target dir for temporary scratch file. (default: %(default)s)",
    )

    sub_parsers = parser.add_subparsers(help="sub-command help", dest="command")
    parser_create = sub_parsers.add_parser("create", help="Create checkpoint")
    parser_create.add_argument(
        "--name", type=str, help="Name of the checkpoint", required=True
    )
    parser_delete = sub_parsers.add_parser("delete", help="Delete checkpoint")
    parser_delete.add_argument(
        "--name", type=str, help="Name of the checkpoint", required=True
    )
    sub_parsers.add_parser("list", help="List checkpoints")
    parser_export = sub_parsers.add_parser("export", help="Export checkpoints via NBD")
    parser_export.add_argument(
        "--name", type=str, help="Name of the checkpoint", required=True
    )
    parser_export.add_argument(
        "--showinfo", help="Show NBD export info too.", action="store_true"
    )
    sub_parsers.add_parser("nbdinfo", help="Show Export info")
    sub_parsers.add_parser("nbdcopy", help="Copy data to qcow file using nbdcopy")
    nbdmap = sub_parsers.add_parser(
        "nbdmap", help="Show NDB export mapping information"
    )
    nbdmap.add_argument(
        "--base",
        help="Show base:allocation mapping instead of bitmap.",
        action="store_true",
        required=False,
    )
    sub_parsers.add_parser(
        "overlay", help="Create qcow overlay images with NBD server backing"
    )
    sub_parsers.add_parser("release", help="Stop exporting blockjob")

    args = lib.argparse(parser)

    counter = logCount()  # pylint: disable=unreachable
    lib.configLogger(args, counter)
    lib.printVersion(__version__)

    if not checkRequirements():
        sys.exit(1)

    try:
        virtClient = virt.client(args)
        domObj = virtClient.getDomain(args.domain)
    except domainNotFound as e:
        logging.error("%s", e)
        sys.exit(1)
    except connectionFailed as e:
        logging.error("Can't connect libvirt daemon: [%s]", e)
        sys.exit(1)

    logging.info("Libvirt library version: [%s]", virtClient.libvirtVersion)

    if not domObj.isActive():
        logging.error("Virtual machine must be running.")
        sys.exit(1)

    if args.command in ["export", "create"]:
        vmConfig = virtClient.getDomainConfig(domObj)
        diskList = getDisks(args, vmConfig, virtClient, domObj)

    if args.command in ["nbdinfo", "nbdcopy", "nbdmap", "overlay"]:
        sockpath = f"/var/tmp/vircpt.{args.domain}.*"
        try:
            args.name = glob.glob(sockpath)[0].split(".")[-1]
        except IndexError:
            logging.error(
                "Unable to get checkpoint name from socket path: [%s].", sockpath
            )
            sys.exit(1)

    if not args.command in ["release", "list"]:
        args.socketfile = f"/var/tmp/vircpt.{args.domain}.{args.name}"

    freezed = False
    if args.command == "create":
        try:
            freezed = fs.freeze(domObj)
            checkpoint.create(args, domObj, diskList)
            if freezed:
                fs.thaw(domObj)
            logging.info("Disks covered by checkpoint:")
            for disk in diskList:
                logging.info(
                    " [%s]:[%s] size: [%sB]", disk.target, disk.filename, disk.size
                )
        except libvirtError as e:
            logging.error("Failed to create checkpoint: [%s]", e)
        finally:
            if freezed:
                fs.thaw(domObj)

    if args.command == "delete":
        try:
            cpt = checkpoint.exists(domObj, args.name)
            checkpoint.delete(cpt)
            logging.info("Removed checkpoint: [%s]", args.name)
        except libvirtError as e:
            logging.error("Failed to remove checkpoint: [%s]", e)

    if args.command == "list":
        logging.info("List of existing checkpoints:")
        try:
            checkpoint.show(domObj)
        except libvirtError as e:
            logging.error("Failed to list checkpoint: [%s]", e)

    if args.command == "export":
        active = False
        try:
            active = virtClient.blockJobActive(domObj, diskList)
        except libvirtError as e:
            logging.info("Unable to get vm block status: [%s]", e)
            sys.exit(1)

        if active:
            logging.error(
                "Block job already active "
                "can't export: use release to stop running exports."
            )
        else:
            try:
                diskList = refreshDiskList(args, virtClient, domObj)
                freezed = fs.freeze(domObj)
                checkpoint.export(args, domObj, diskList)
                if freezed:
                    fs.thaw(domObj)
                showcmd(args, domObj, diskList)
            except libvirtError as e:
                logging.error("Failed to export checkpoint: [%s]", e)
            finally:
                if freezed:
                    fs.thaw(domObj)

        if args.showinfo:
            args.command = "nbdinfo"

    if args.command == "nbdinfo":
        execute(
            [
                "nbdinfo",
                f"nbd+unix:///?socket={args.socketfile}",
                "--list",
                "--json",
            ]
        )

    if args.command == "nbdmap":
        bitmap = f"qemu:dirty-bitmap:{args.name}"
        if args.base:
            bitmap = "base:allocation"
        diskList = refreshDiskList(args, virtClient, domObj)
        logging.info("Checkpoint/bitmap mapping:")
        for disk in diskList:
            logging.info("Disk: [%s]", disk.target)
            execute(
                [
                    "nbdinfo",
                    f"nbd+unix:///{disk.target}?socket={args.socketfile}",
                    f"--map={bitmap}",
                    "--json",
                ]
            )

    if args.command == "nbdcopy":
        logging.info("Copy full image using nbdcopy")
        diskList = refreshDiskList(args, virtClient, domObj)
        for disk in diskList:
            disk.size = domObj.blockInfo(disk.target)[0]
            file = f"backup-{disk.target}.qcow2"
            logging.info("Disk: [%s]: [%s]", disk.target, file)
            execute(
                [
                    "qemu-img",
                    "create",
                    "-q",
                    "-f",
                    "qcow2",
                    file,
                    f"{disk.size}B",
                ]
            )
            execute(
                [
                    "nbdcopy",
                    f"nbd+unix:///{disk.target}?socket={args.socketfile}",
                    "--",
                    "[",
                    "qemu-nbd",
                    "-f",
                    "qcow2",
                    file,
                    "]",
                ]
            )

    if args.command == "overlay":
        logging.info("Create overlay images")
        cpt = checkpoint.exists(domObj, args.name)
        diskList = virtClient.getDomainDisksFromCheckpoint(cpt.getXMLDesc())
        for disk in diskList:
            file = f"overlay_{disk.target}.qcow2"
            logging.info("Disk: [%s]: [%s]", disk.target, file)
            execute(
                [
                    "qemu-img",
                    "create",
                    "-q",
                    "-F",
                    "raw",
                    "-b" f"nbd+unix:///{disk.target}?socket={args.socketfile}",
                    "-f",
                    "qcow2",
                    file,
                ]
            )

    if args.command == "release":
        logging.info("Releasing export")
        virtClient.stopExport(domObj)

    if counter.count.errors > 0:
        logging.error("Error during checkpoint handling")
        sys.exit(1)

    logging.info("Finished successfully")


if __name__ == "__main__":
    main()
